<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>生成树</title>
      <link href="/2023/11/01/STP1/"/>
      <url>/2023/11/01/STP1/</url>
      
        <content type="html"><![CDATA[<h1 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h1><blockquote><p>前言<br>    * 以太网交换网络中为了进行链路备份，提高网络可靠性，通常会使用几余链路。但是使用穴余链路会在交换网络上产生环路，引发广播风暴以及MAC地址表不稳定等故障现象，从而导致用户通信质量较差，甚至通信中断。为解决交换网络中的环路问题，提出了生成树协议STP（Spanning Tree Protocol）。<br>    * 运行STP协议的设备通过彼此交互信息发现网络中的环路，并有选择的对某个接口进行阻塞，最终将环形网络结构修剪成无环路的树形网络结构，从而防止报文在环形网络中不断循环，避免设备由于重复接收相同的报文造成处理能力下降。<br>    * RSTP（Rapid Spanning Tree Protocol）协议基于STP协议，对原有的STP协议进行了更加细致的修改和补充，实现了网络拓扑快速收敛。 </p></blockquote><p>为什么要有生成树？树是什么？</p><p>树就像是数据结构中的树一样。为了解决而成交换机网络的冗余性与环路。</p><h3 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h3><p> <img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image.webp" alt="环路"></p><p>局域网在规模逐渐扩大，引发的问题便是冗余性增加以及形成环路。</p><ul><li>冗余性增加就是如图，接入层交换机单链路上联，则存在单链路故障，也就是如果这根上联链路发生故障，交换机下联用户就断网了。另一个问题的单点故障，也就是交换机如果岩机，交换机下联用户也就<br>断网了。</li></ul><p>进而交换机互联过程中一般会使用冗余链路来实现备份但是会产生环路。</p><p>举个例子就是终端发送报文交给交换机，但是交换机负责转发，你给我我给他他再给你报文不停地传输，而终端设备还在产生新的报文，进而导致拥堵宕机等等。</p><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-1.webp" alt="人为环路"></p><p>这一部分主要是人为原因，说的简单直白点就是我连我自己，就是最简单的环路。</p><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-2.webp" alt="二层环路问题"></p><p>二层环路带来了两种问题：</p><ol><li><p>广播风暴</p><ul><li>根据交换机的转发原则，如果交换机从一个端口上接收到的是一个广播顿，或者是一个目的MAC地址未知的单播帧，则会将这个帧向除源端口之外的所有其他端口转发。如果交换网络中有环路，则这个顿会被无限转发，此时便会形成广播风暴，网络中也会充斥着重复的数据顿。</li><li>本例中，SW3收到了一个广播顿将其进行泛洪，SW1和SW2也会将此顿转发到除了接收此帧的其他所有端口，结果此帧又会被再次转发给SW3，这种循环会一直持续，于是便产生了广播风暴。交换机性能会因此急速下降，并会导致业务中断。</li></ul></li><li><p>MAC地址漂移</p><ul><li>交换机是根据所接收到的数据帧的源地址和接收端口生成MAC地址表项的。</li><li>本例中，SW3收到一个广播帧泛洪，SW1从GEO&#x2F;0&#x2F;1接口接收到广播帧后学习且泛洪，形成MAC地址5489-98EE-788A与GE0&#x2F;0&#x2F;1的映射；SW2收到广播顿后学习且泛洪，SW1再次从GE0&#x2F;0&#x2F;2收到源MAC地址为5489-98EE-788A的广播顿并进行学习，5489-98EE-788A会不断地在GE0&#x2F;0&#x2F;1与GE0&#x2F;0&#x2F;2接口之间来回切换，这被称为MAC地址漂移现象。</li></ul></li></ol><p><strong>而生成树就是为了解决这两种问题</strong></p><p>那么我们就要引入一个概念就是STP</p><blockquote><ul><li>在以太网中，二层网络的环路会带来广播风暴，MAC地址表震荡，重复数据顿等问题，为解决交换网络中的环路问题，提出了STP。</li><li>STP通过构造一棵树来消除交换网络中的环路。</li><li>运行STP算法，判断网络中存在环路的地方并阻断几余链路，将环路网络修剪成无环路的树型网络，从而避免了数据帧在环路网络中的增生和无穷循环。</li></ul></blockquote><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-3.webp" alt="初步认识生成树"></p><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-4.webp" alt="生成树能够动态响应网络拓扑变化调整阻塞接口"></p><p>如图，交换机上运行STP协议，会通过报文监控网络的拓扑结构，正常情况下是将SW3上的一个接口进行阻塞（Block），从而打破环路，当监控到SW1与SW3之间出现链路故障，则恢复阻塞端口进入转发状态。</p><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-5.webp" alt="二层及三层环路"></p><ul><li>常见环路主要分为二层环路和三层环路。<ul><li>二层环路主要因为网络中部署了二层几余环境，或人为的误接线缆导致，可以通过借助特定的协议或机制实现二层防环；</li><li>三层环路主要因为路由环路，可以通过动态路由协议防环和IP报文头部中的TTL字段用于防止报文被无止尽地转发。</li></ul></li></ul><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-6.webp" alt="生成树园区示意"></p><p>生成树协议应用于园区网络的二层网络中，进行链路备份和消除环路。</p><h2 id="STP"><a href="#STP" class="headerlink" title="STP"></a>STP</h2><blockquote><ul><li>STP是一个用于局域网中消除环路的协议。</li><li>运行该协议的设备通过彼此交互信息而发现网络中的环路，并对某些接口进行阻塞以消除环路。</li><li>STP在网络中运行后会持续监控网络的状态，当网络出现拓扑变更时，STP能够感知并且进行自动响应，从而使得网络状态适应新的拓扑结构，保证网络可靠性。</li><li>由于局域网规模的不断增长，生成树协议已经成为了当前最重要的局域网协议之一。</li></ul></blockquote><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-7.webp" alt="STP"></p><h3 id="桥ID"><a href="#桥ID" class="headerlink" title="桥ID"></a>桥ID</h3><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-8.webp" alt="桥ID"></p><p>首先我们要说的就是桥ID（Bridge ID “BID”）桥ID就是<code>桥优先级+MAC地址</code>因为MAC地址唯一所以BID也是唯一的。桥ID优先级取值范围是0～65535，默认值为32768,可以修改但是修改值必须为4096的倍数。</p><p>选取标准：首先比较优先级大小，<code>优先级小的首选</code>其次比较MAC地址<code>地址越小的首选</code>。</p><h3 id="根桥"><a href="#根桥" class="headerlink" title="根桥"></a>根桥</h3><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-9.webp" alt="根桥"></p><p>都知道树结构吧，学过数据结构的都会认知，树都有一个根，计算机网络拓扑中也存在根，当然不是根服务器，为了避免环路出现就必须阻塞部分接口，选取根桥，建立树状路径就是为了建立树结构。</p><ul><li>树形的网络结构必须有树根，于是STP引入了根桥（Root Bridge）概念。</li><li>对于一个STP网络，根桥在全网中只有一个，它是整个网络的逻辑中心，但不一定是物理中心。根桥会根据网络拓扑的变化而动态变化。</li><li>网络收敛后，根桥会按照一定的时间间隔产生并向外发送配置BPDU，其他设备仅对该报文进行处理，传达拓扑变化记录，从而保证拓扑的稳定。丨</li></ul><h3 id="Cost（开销）"><a href="#Cost（开销）" class="headerlink" title="Cost（开销）"></a>Cost（开销）</h3><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-10.webp" alt="Cost"></p><p>每一个STP接口都会存在一个对应的Cost，一般情况下Cost值是通过STP Cost计算得出，所以是默认就会存在的，当然也可以认为的去设置Cost。</p><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-11.webp" alt="Cost计算方法"></p><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-12.webp" alt="RPC"></p><p>RPC就是根路径开销，说白了就是当前交换机到某个根桥的“成本，路费”。</p><p>RPC使用的是累加，也就是该设备到根桥的路径的开销和</p><p>根桥到根桥的RPC为0.</p><h3 id="PID"><a href="#PID" class="headerlink" title="PID"></a>PID</h3><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-13.webp" alt="Port ID"></p><p>PID就是端口ID，每一个端口都会对应一个编号就是PID</p><ul><li>运行STP交换机的每个端口都有一个端口ID，端口ID由端口优先级和端口号构成。端口优先级取值范围是0到240，步长为16，即取值必须为16的整数倍。缺省情况下，端口优先级是128。端口ID可以用来确定端口角色。</li></ul><h3 id="BPDU"><a href="#BPDU" class="headerlink" title="BPDU"></a>BPDU</h3><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/3day1/image-14.webp" alt="BPDU"></p><blockquote><p>由于工作上的变故可能会断更一段时间。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据通信基础第二天</title>
      <link href="/2023/10/24/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%802Day/"/>
      <url>/2023/10/24/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%802Day/</url>
      
        <content type="html"><![CDATA[<h3 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h3><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/2day/image.webp" alt="网络拓扑图简介"></p><p>拓扑图说简单点就是对网络设备的规划。</p><ul><li>网络拓扑的绘制：<ul><li>掌握专业的网络拓扑图绘制技巧是非常重要的，这需要大量的练习。</li><li>Vi sio及PowerPoint是两种用于绘制网络拓扑图的常见工具。</li></ul></li></ul><h3 id="网络拓扑形态"><a href="#网络拓扑形态" class="headerlink" title="网络拓扑形态"></a>网络拓扑形态</h3><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/2day/image-1.webp" alt="网络拓扑形态"></p><ul><li>星型网络：<ul><li>所有节点通过一个中心节点连接在一起。</li><li>优点：容易在网络中增加新的节点。通信数据必须经过中心节点中转，易于实现网络监控。</li><li>缺点：中心节点的故障会影响到整个网络的通信。</li></ul></li><li>总线型网络：<ul><li>所有节点通过一条总线（如同轴电缆）连接在一起。</li><li>优点：安装简便，节省线缆。某一节点的故障一般不会影响到整个网络的通信。</li><li>缺点：总线故障会影响到整个网络的通信。某一节点发出的信息可以被所有其他节点收到，安全性低。</li></ul></li><li>环型网络：<ul><li>所有节点连成一个封闭的环形。</li><li>优点：节省线缆。</li><li>缺点：增加新的节点比较麻烦，必须先中断原来的环，才能插入新节点以形成新环。</li></ul></li><li>树型网络：<ul><li>树型结构实际上是一种层次化的星型结构。</li><li>优点：能够快速将多个星型网络连接在一起，易于扩充网络规模。</li><li>缺点：层级越高的节点故障导致的网络问题越严重。</li></ul></li><li>全网状网络：<ul><li>所有节点都通过线缆两两互联。</li><li>优点：具有高可靠性和高通信效率。</li><li>缺点：每个节点都需要大量的物理端口，同时还需要大量的互连线缆。成本高，不易扩展。</li></ul></li><li>部分网状网络：<ul><li>只是重点节点之间才两两互连。<br>  优点：成本低于全网状网络。</li><li>缺点：可靠性比全网状网络有所降低。</li></ul></li><li>在实际组网中，通常都会根据成本、通信效率、可靠性等具体需求而采用多种拓扑形态相结合的方法。</li></ul><p>实际情况中运用的比较多的是组合型的网络拓扑。</p><h3 id="地址解析协议（ARP）"><a href="#地址解析协议（ARP）" class="headerlink" title="地址解析协议（ARP）"></a>地址解析协议（ARP）</h3><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/2day/image-2.webp" alt="地址解析协议"></p><p>根据已知的IP地址解析获得对应的MAC地址。</p><p><a href="https://baike.baidu.com/item/ARP/609343?fr=ge_ala">ARP</a>衍生出来ARP攻击或者欺骗。</p><p>ARP首次发包广播包含（本机MAC、本机IP、目标IP）然后目标终端以单播的形式响应报文（本机MAC、本机IP、目标IP、本机MAC）。</p><p>接收到广播的目标终点会生成ARP表，用来存储IP及对应的MAC地址，属于数据链路层。</p><blockquote><p>这里有必要提到一个概念就是以太网协议规定，一组电信号就是一个数据包，我们把这个数据包成为“帧”。每一个帧由 标头(Head) 和 数据(Data) 两部分组成，标头存放着发送者和接受者的信息，而数据就是存放着要发送的数据了一台计算的的数据通过物理层和链路层发送给另一台计算机，这个时候就需要对方的MAC地址。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据通信基础第一天----认识</title>
      <link href="/2023/10/23/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%801Day/"/>
      <url>/2023/10/23/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%801Day/</url>
      
        <content type="html"><![CDATA[<h3 id="华为设备图标基本认识"><a href="#华为设备图标基本认识" class="headerlink" title="华为设备图标基本认识"></a>华为设备图标基本认识</h3><p> <img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/1day/image.webp" alt="华为图标"></p><blockquote><p>目前主要认识只有通用路由器、通用交换机、核心交换机、汇聚交换机、堆叠交换机、防火墙。</p></blockquote><blockquote><p>最主要的就是AP、AC、WiFi信号。</p></blockquote><p>其次就是终端设备：</p><blockquote><p>PC、Pad、手机、笔记本电脑等等终端设备，当然物联网也算啊</p></blockquote><h3 id="网络通信的基本概念"><a href="#网络通信的基本概念" class="headerlink" title="网络通信的基本概念"></a>网络通信的基本概念</h3><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/1day/image-1.webp" alt="网络通信的基本概念"></p><p>通信说的直白点就是说话，人与人之间的对话等等。<br>而网络通信就是终端设备之间的信息传递。</p><ul><li>网络通信的例子<ul><li>A.两台计算机通过一根网线相连，就组成了一个最简单网络。</li><li>B.由一台路由器（计算机）和多台计算机设备组成的小型网络。在这样子的网络中，通过路由器的中转，每两台终端设备之间都可以自由的专递文件。</li><li>C.当计算机想要从某个网址中获取文件时，必须线接入Internet，然后才能开始下载。</li></ul></li></ul><p>说的清楚点，网络通信就是计算机想要交换数据（通信）就是先把两台设备通过物理线缆等等设备相连接。<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91/199186?fr=aladdin&fromtitle=Internet&fromid=272794">Internet</a>等等相关的介绍可以参考百度。</p><h3 id="信息传递过程"><a href="#信息传递过程" class="headerlink" title="信息传递过程"></a>信息传递过程</h3><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/1day/image-2.webp" alt="信息传递过程"></p><p>从图中我们不难看出信息传递过程就像是快递的收发，首先先把我们的物品（要发送的数据）装进箱子中（封装报文）发送到集散中心（网关路由器）此时再由卡车或者飞机运送到目的地相应的集散中心最后就到了我们的手里。</p><blockquote><p>网络通信的信息传递也是这个样子。</p></blockquote><h3 id="常见术语"><a href="#常见术语" class="headerlink" title="常见术语"></a>常见术语</h3><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/1day/image-3.webp" alt="常见术语"></p><ul><li>数据载荷：可以理解为最终想要传递的信息，但实际上，在具有层次化结构的通信过程中，<br>上一层协议传递给下一层协议的数据单元（报文）都可以称之为下一层协议的数据载荷。</li><li>报文：网络中交换与传输的数据单元，具有一定的内在格式，通常都具有头部+数据载荷+<br>尾部的基本结构。传输过程中，报文的格式和内容可能发生改变。</li><li>头部：为了更好的传递信息，在组装报文时，在数据居载荷的前面添加的信息段统称为报文<br>的头部。</li><li>尾部：为了更好的传递信息，在组装报文时，在数据居载荷的后面添加的信息段统称为报文<br>的尾部。注意，很多报文是没有尾部的。</li><li>封装：分层协议所采用的一种技术，底层协议收到来自上层协议的消息时，将该消息附加<br>到底层帧的数据部分。</li><li>解封装：是封装的逆过程，也就是去掉报文的头部和尾部，获取数据载荷的过程。</li><li>网关：是在采用不同体系结构或协议的网络之间进行互通时，用于提供协议转换、路由选<br>择、数据交换等功能的网络设备。网关是一种根据其部署位置和功能而命名的术语，而不<br>是一种特定的设备类型。</li><li>路由器：为报文选择传递路径的网络设备。</li><li>终端设备：数据通信系统的端设备，作为数据的发送者或接收者，提供用户接入协议操作<br>所需必要功能，可以是计算机、服务器、Vol P、手机等。</li></ul><h3 id="数据通信网络基本概念"><a href="#数据通信网络基本概念" class="headerlink" title="数据通信网络基本概念"></a>数据通信网络基本概念</h3><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/1day/image-4.webp" alt="数据通信的基本概念"></p><blockquote><ul><li>数据通信网络：<br>   路由器、交换机、防火墙、无线控制器、无线接入点，以及个人电脑、网络打印机、服务器等设备构成的通信网络。</li></ul></blockquote><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/1day/image-5.webp" alt="交换机"></p><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/1day/image-6.webp" alt="路由器"></p><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/1day/image-7.webp" alt="防火墙"></p><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/1day/image-8.webp" alt="无线设备"></p><p>网络设备中主要的四种设备</p><ul><li>无线局域网WLAN广义上是指以无线电波、激光、红外线等无线信号来代替有线局域网中<br>的部分或全部传输介质所构成的网络。而常见的Wi-Fi是指IEEE802.11标准上的无线局域网<br>技术。</li><li>在WLAN中，常见的设备有胖AP、瘦AP和无线控制器AC。<ul><li>无线接入点(AP,Access Point)<ul><li>一般支持FATA P、FIT AP和云管理工作模式，根据网络规划的需求，可以灵活地在各种模式下切换。</li><li>FATA P：适用于家庭，独立工作，需单独配置，功能较为单一，成本低。</li><li>FIT AP：适用于大中型企业，需要配合AC使用，由AC统一管理和配置，功能丰富。</li><li>云管理：适用于中小型企业，需要配合云管理平台使用，由云管理平台统一管理和配置，功能丰富，即插即用。</li></ul></li><li>无线接入控制器(AC,Access Controller）<ul><li>一般位于整个网络的汇聚层，提供高速、安全、可靠的WLAN业务。</li><li>提供大容量、高性能、高可靠性、易安装、易维护的无线数据控制业务，具有<br>组网灵活、绿色节能等优势。</li></ul></li></ul></li></ul><p><img src="https://gitee.com/seyzn/img/raw/master/%E6%95%B0%E9%80%9A/1day/image-9.webp" alt="局域网、城域网、广域网"></p><ul><li>网络类型可以根据覆盖的地理范围，划分成局域网和广域网，以及介于局域网和广域网之<br>间的城域网。</li><li>局域网：<ul><li>基本特点：<ul><li>覆盖范围一般在几公里之内；</li><li>主要作用是把分布距离较近（如：有一个家庭内、一座或几座大楼内、一个校园内，等等)的若干终端电脑连接起来。</li></ul></li><li>使用技术：以太网、Wi-F等。</li></ul></li><li>城域网：<ul><li>基本特点：<ul><li>城域网是较大型的局域网，需要的成本较高，但可以提供更快的传输速率。它改进了局域网中的传输介质，扩大了局域网的访问范围，范围可以包含一个大学校园或城市;</li><li>主要作用是将同一城市内不同地点的主机、数据库以及局域网等连接起来；</li><li>与广域网作用相似，但实现方式和性能不同。</li></ul></li><li>使用技术：基于大型的局域网，与局域网技术相似，如：以太网（10Gbps&#x2F;100Gbps）、Wi MAX(全球互通微波访问)。</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序之旅————数字比大小</title>
      <link href="/2023/04/02/WeChat-leaning/"/>
      <url>/2023/04/02/WeChat-leaning/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录该板块记录了我目前学习微信小程序的开发，本版块所书写的内容仅代表个人观点<br>请仔细甄别。欢迎与大家相互学习，一起共同进步。</p></blockquote><h1 id="创建微信小程序"><a href="#创建微信小程序" class="headerlink" title="创建微信小程序"></a>创建微信小程序</h1><p>微信小程序在学习之前肯定是要有一个微信小程序的开发者账号的，里面包含重要的appid等有关于开发者的信息。</p><p>①打开<a href="https://mp.weixin.qq.com/" target="_blank">微信公众平台</a>右上角有一个注册按钮</p><p>②选择小程序点击进入<br><img src="https://gitee.com/seyzn/img/raw/master/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/zhuce.webp"></p><p>③进入小程序注册见面，填写 <code> 未被微信平台注册，未被微信开放平台注册，未被个人微信号绑定的邮箱</code>，注意这三者必须都得满足，之前我犯了一个错误就是，用绑定过微信公众号的微信注册，导致进入微信公众平台，进去之后只有微信公众号的界面，没有微信小程序的界面，所以这点必须要牢记。</p><p>④邮箱激活，会有邮件发送到你的邮箱。相当于邮箱验证。</p><p>⑤用户信息的等级u，选择祖册的国家&#x2F;地区，以及主体类型，等级主体信息</p><p>⑥新注册的小程序信息完善</p><ul><li>补充小程序基本信息</li><li>给小程序添加项目成员</li><li>生成小程序的AppSecret，即小程序的秘钥</li></ul><p>随后就是安装程序了，<a herf="https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html" target="blank">下载地址</a>，具体安装过程就不展开了，网上也有很多教程。</p><ul><li>安装一定要右键 <code>以管理员方式运行</code> 。</li></ul><p>安装完成后我们双击打开</p><p><img src="https://gitee.com/seyzn/img/raw/master/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/x_jiemian.webp"></p><p>因为我已经创建过微信小程序，所以界面就是这个样子，不过基本形式上面查不了很多，点击+创建一个新的微信小程序，路径自己创建一个空文件夹，选择这个空文件夹即可。然后就是选择AppID这一栏填写我们之前创建的微信小程序账号的appid，如果不知道可以点击最上面的第一个链接登录自己的账号就能查看到自己的appid项目名称可以自写。</p><h1 id="两个数字比大小"><a href="#两个数字比大小" class="headerlink" title="两个数字比大小"></a>两个数字比大小</h1><p>首先编写页面文件，即index.Wxml文件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在虚拟机上创建Linux（CentOS）</title>
      <link href="/2023/03/18/vm%E4%B8%8A%E5%88%9B%E5%BB%BAcentos/"/>
      <url>/2023/03/18/vm%E4%B8%8A%E5%88%9B%E5%BB%BAcentos/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：本篇文章是用来描述本人的作业，再学习linux中记录下来以便日后需要，如需转载请注明出处。本篇文章遵循的协议在文章末尾，请务必注意。</p></blockquote><h2 id="首先下载centos"><a href="#首先下载centos" class="headerlink" title="首先下载centos"></a>首先下载centos</h2><p>百度CentOS，选中<a href ="https://www.centos.org/" target="_blank">CentOS官网</a>打开之后便会看到如下的页面</p><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux1.webp"></p><p>点击Download会出现好多，根据自己的硬件选择合适自己的电脑的下载，一般我们选择想86_6。</p><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux2.webp"></p><p>紧接着我们会跳转到包含许多链接的页面</p><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux3.webp"></p><p>要说明的是这里所包含的所有链接基本都是镜像链接，所以选择一个下载速度快的便可以了。</p><p>例如这里我们选用的是 网易 的镜像站</p><blockquote><p><a href="http://mirrors.163.com/centos/7.9.2009/isos/x86_64/">http://mirrors.163.com/centos/7.9.2009/isos/x86_64/</a></p></blockquote><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux4.webp"></p><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>在下载的过程中我们开始配置虚拟机</p><ul><li>创建一个虚拟机</li></ul><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux5.webp"></p><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux6.webp"></p><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux7.webp"></p><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux8.webp"></p><ul><li>最后一直点下一步就可以了</li><li>等待镜像文件下载完成</li></ul><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><ul><li>选择CD&#x2F;DVD，双击</li></ul><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux9.webp"></p><ul><li>选择使用ISO镜像文件，浏览刚刚下载的文件即可</li></ul><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux10.webp"></p><p>选中之后点击应用</p><ul><li>完成之后开启虚拟机</li><li>加载的过程中我创建了两个用户，一个是ROOT根用户（也就是我们的管理员账户，拥有最高权限），第二个就是我们的普通账户。</li></ul><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux11.webp"></p><h2 id="安装虚拟机之————我的图形界面哪里去了"><a href="#安装虚拟机之————我的图形界面哪里去了" class="headerlink" title="安装虚拟机之————我的图形界面哪里去了"></a>安装虚拟机之————我的图形界面哪里去了</h2><ul><li>完成之后会进入终端页面，没有图形界面</li></ul><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux13.webp"></p><p>紧接着会让我们输入账户密码，只需要输入刚刚注册的用户名和密码。</p><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux14.webp"></p><ul><li>因为没有图形界面我们就需要检查一下是否安装成功<br><code>yum groupinstall &quot;X Window System&quot;</code><br>但是我们输入安装图形化界面的指令之后，发现出现了如下问题</li></ul><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux15.webp"></p><ul><li><p>也就是说我们的网络有问题需要修理</p></li><li><p>输入<code>nmcli d</code>查看网络连接会发现有两个Device分别是<code>ens33</code>和<code>lo</code></p></li><li><p>需要重新配置网络连接（DHPC）<br>进入到网络脚本中<br><code>cd /etc/sysconfig/network-scripts</code><br>会发现目前我们进入到了network-scripts文件下</p></li><li><p>ls一下（查看当前文件夹下面都有哪些文件）</p></li></ul><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux18.webp"></p><ul><li>用<code>vi</code>修改第一个文件，即<code>ifcfg-ens33</code> 打开之后会出现如下</li></ul><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux19.webp"></p><p>此时我们修改<br><code>BOOTPROTO=DHCP</code><br><code>ONBOOT=yes</code><br>就是将我们的网络设置成动态的</p><p>最后ctl+zz保存</p><ul><li><p>重置网络<br>  <code>systemctl restart network</code></p></li><li><p>重新安装桌面环境包<br>  <code>yum groupinstall -y &quot;GNOME Desktop&quot;</code></p></li><li><p>等待完成字样的出现（且会有伴随蜂鸣器），运行<code>startx</code>便会进入<br> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux22.webp"></p></li></ul><p>此时为了我们方便下次进入图形界面，但是进去之后不用担心全是英文，因为我们是在root用户下利用startx命令进入的图形界面所以只有英文</p><ul><li><p>解决方法</p><ul><li>根据下面的截图打开终端<br>  要向<code>/etc/rc.d/rc.load</code>中添加<code>startx</code>指令<br> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux23.webp"><br> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux24.webp"></li></ul></li><li><p>最后 <code>reboot</code> 重启。</p></li></ul><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux25.webp"></p><h2 id="创建虚拟机快照"><a href="#创建虚拟机快照" class="headerlink" title="创建虚拟机快照"></a>创建虚拟机快照</h2><blockquote><p>创建快照是为了让我们日后更方便使用虚拟机</p></blockquote><p> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux26.webp"></p><p>为创建的快照起名字<br> <img src="https://gitee.com/seyzn/img/raw/master/Linux/Linux27.webp"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><pre><code>本次学习linux的安装为以后打下坚实基础，最后本篇文章如有问题，或者不明白的可以随时与我联系，或者在我的github或者浏览器下方的联系中选择邮箱与我联系，欢迎与大家一起共同进步。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于页面配置的一些情况</title>
      <link href="/2022/12/08/hello-world/"/>
      <url>/2022/12/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>这里主要记录一些关于文件上传的信息</p><p>本页面主要用hexo+github以及图床制作利用vercel做page页面的副载。</p><h3 id="运行Hexo"><a href="#运行Hexo" class="headerlink" title="运行Hexo"></a>运行Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><p>两者选一个即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g </span><br></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p>两者选一个即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>以后方便上传文件代码便可以写成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p>总结</p><p>首先切换到Blog文件夹下面右键运行  git<br>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>登录到github上面</p><p>接着更新你的博客，博客更新在\blog\source_posts文件夹下面。</p><p>更新完成后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>此时会出现一个本地连接查看你写的文章，确认没有问题后,将博客部署在github上面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这个”d”就是deploy的意思。此过程需要输入github账号及密码。</p><p>至此我们就完成了搭建hexo博客并部署到github上的所有工作，在浏览器中输入xxx.github.io即可访问自己的个人博客。</p><p>如果git上传之后打开网页仍无法看到更新内容此时选择利用github desktop 程序上传本地的仓库文件即可。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
